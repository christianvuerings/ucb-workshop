#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class EmployeesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    def findPersonIdentifier(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Identifier by ID

        Args:
            id, str: ID of Employee Identifier to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonIdentifier" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/identifier'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPersonEmail(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Email by ID

        Args:
            id, str: ID of Employee Email to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonEmail" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/email'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPersonPhone(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Phone by ID

        Args:
            id, str: ID of Employee Phone to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonPhone" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/phone'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPersonDepartment(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Department by ID

        Args:
            id, str: ID of Employee Department to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonDepartment" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/department'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPerson(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee by ID

        Args:
            id, str: ID of Employee to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPerson" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPersonName(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Name by ID

        Args:
            id, str: ID of Employee Name to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonName" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/name'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    def findPersonAddress(self, id, effdt, app_id, app_key, **kwargs):
        """Find Employee Address by ID

        Args:
            id, str: ID of Employee Address to fetch (required)
            effdt, bool: Return effective dated records (required)
            app_id, str: API ID (required)
            app_key, str: API Key (required)
            
        Returns: PersonResponse
        """

        allParams = ['id', 'effdt', 'app_id', 'app_key']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method findPersonAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/employees/{id}/address'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('effdt' in params):
            queryParams['effdt'] = self.apiClient.toPathValue(params['effdt'])
        if ('app_id' in params):
            queryParams['app_id'] = self.apiClient.toPathValue(params['app_id'])
        if ('app_key' in params):
            queryParams['app_key'] = self.apiClient.toPathValue(params['app_key'])
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'PersonResponse')
        return responseObject
        
        
    


